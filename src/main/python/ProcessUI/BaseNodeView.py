"""
@ Valorisation Recherche HSCM, Societe en Commandite â€“ 2024
See the file LICENCE for full license details.
"""

"""
    BaseNodeView Basic node view containing 3 tabs: Settings, Results and Logs.
    Settings tab is used by a plugin to acquire the parameters from the user.
    Results tab is used to display the results of the plugin.
    Logs shows the log generated by the plugin after the compute is done.
"""

from qtpy import QtWidgets

from ui.Ui_BaseNodeView import Ui_BaseNodeView

class BaseNodeView(QtWidgets.QWidget, Ui_BaseNodeView):
    """
        BaseNodeView Basic node view containing 3 tabs: Settings, Results and Logs.
        Settings tab is used by a plugin to acquire the parameters from the user.
        Results tab is used to display the results of the plugin.
        Logs shows the log generated by the plugin after the compute is done.
    """
    def __init__(self, parent_node, cache_manager, pub_sub_manager, log_manager, *args, **kwargs):
        super(BaseNodeView, self).__init__(*args, **kwargs)
        self._parent_node = parent_node
        self._pub_sub_manager = pub_sub_manager
        self._cache_manager = cache_manager
        self._log_manager = log_manager
        self._settings_view = None
        self._results_view = None

        # init UI
        self.setupUi(self)

        # Update logs
        self.update_logs()

    def set_settings_view(self, settings_view):
        """ Set the settingsView widget """
        self.settings_layout.addWidget(settings_view)
        self._settings_view = settings_view

    def set_results_view(self, results_view):
        """ Set the ResultsView widget """
        self.results_layout.addWidget(results_view)
        self._results_view = results_view

    def update_logs(self):
        """ Update the log text with the log from the log manager """
        self.logs_textedit.clear()
        for log in self._log_manager.get_logs(self._parent_node.identifier):
            self.logs_textedit.append(log)
        pass

    def on_save_logs(self):
        """ Save the logs to a file """
        # log = self.logs_textedit.toPlainText()
        # if log is not None and log != '':
        #     filename, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Save log file as', filter='*.txt')
        #     if filename is not None and filename:
        #         with open(filename, 'w') as f:
        #             f.write(log)
        pass
            
    def on_clear_logs(self):
        """ Clear the logs from the log manager and the UI """
        #self._log_manager.clear(self._parent_node.identifier)
        #self.update_logs()
        pass

    def on_apply_settings(self):
        """ Call the settingsView to apply it's settings """
        self._settings_view.on_apply_settings()
        self.setVisible(False)
        
    def on_cancel_settings(self):
        """ Hide the widget from the scene """
        self.setVisible(False)

    def on_visible_changed(self):
        """ When visible=True, call the settingsView to load its settings """
        if self.isVisible():
            if self._settings_view is not None:
                self._settings_view.load_settings()
            
            if self._results_view is not None:
                self._results_view.load_results()
            self.update_logs()

